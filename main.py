import logging
import hashlib
import time
from aiogram.types import InputFile
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import config
logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_handler(msg: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='buy_access'),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
        InlineKeyboardButton("ü§î –æ –ø–∞–∫–µ", callback_data='info'),  
    )   
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def back_to_menu(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='buy_access'),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
        InlineKeyboardButton("ü§î –æ –ø–∞–∫–µ", callback_data='info'),  
    )
    await callback_query.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await callback_query.answer()



@dp.callback_query_handler(lambda c: c.data == 'info')
async def handle_buy(callback_query: types.CallbackQuery):
    photo = InputFile("images/welcome.png")  
    btn = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",callback_data="buy_access"),
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    await callback_query.message.answer_photo(
        photo=photo,
            caption = """
üéÅ –í –ø–∞–∫ –≤—Ö–æ–¥–∏—Ç:

üî† 1000+ –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã—Ö –±—É–∫–≤  
üé¨ –í—ã—Ä–µ–∑–∫–∏ –∏–∑ –∫—É–ª—å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤  
üéß 400+ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–º–µ–º—ã, –≥–ª–∏—á–∏, –∫–ª–∏–∫–∏ –∏ —Ç.–¥.)  

üì± 50 PNG-–ª–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π  
üòÇ 650+ –º–µ–º–æ–≤ (–≤–∏–¥–µ–æ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏)  

üéµ 750+ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤  
üîÄ 100 —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (–≥–æ—Ä–∏–∑–æ–Ω—Ç + –≤–µ—Ä—Ç–∏–∫–∞–ª—å)  

üíª –ö—Ä—è–∫–Ω—É—Ç—ã–µ Adobe Premiere & After Effects 2023  
üß∞ 50 –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ (BorisFX, Sapphire –∏ –¥—Ä.)  

üì≤ –†–∞–º–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è TikTok / Shorts / Reels  
üåÑ 200+ —Ñ–æ–Ω–æ–≤ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ)  
üìΩÔ∏è 230 —Ñ—É—Ç–∞–∂–µ–π –æ—Ç –º–µ–º–æ–≤ –¥–æ –∏–∫–æ–Ω–æ–∫  

üî§ 8000+ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ –∏ –≤–∏–¥–µ–æ  
üòé 100 –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ 10 —Å—Ç–∏–ª—è—Ö  

üí∏ –¶–µ–Ω–∞: –≤—Å–µ–≥–æ 499‚ÇΩ  
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –ø—Ä–æ—Ñ–∏. –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å —á—Ç–æ–±—ã –≤—Å–µ —É–≤–∏–¥–µ—Ç—å!
""",
        reply_markup=btn,
    )
    await callback_query.answer()



@dp.callback_query_handler(lambda c: c.data == 'help')
async def handle_buy(callback_query: types.CallbackQuery):
    btn = InlineKeyboardMarkup().add(InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",callback_data="buy_access"),
                                     InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await callback_query.message.answer("""
üÜò –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂—É –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã:
                                        -@kinemasterovvvv
                                        """, reply_markup=btn)

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'buy_access')
async def handle_buy(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    order_id = f"{user_id}_{int(time.time())}"
    amount = 499

    sign_str = f"{config.MERCHANT_ID}:{amount}:{config.SECRET_2}:{order_id}"
    sign = hashlib.md5(sign_str.encode()).hexdigest()

    pay_url = f"https://pay.freekassa.ru?m={config.MERCHANT_ID}&oa={amount}&o={order_id}&s={sign}"
    btn = InlineKeyboardMarkup().add(InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url),
                                     InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await callback_query.message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=btn)
    await callback_query.answer()

  
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
